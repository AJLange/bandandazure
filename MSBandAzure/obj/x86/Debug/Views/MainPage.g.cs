#pragma checksum "C:\Users\amlange\Documents\ms-band-azure-master\MSBandAzure\Views\MainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "F168207EA1E2AD49EDBF97C58C0DE3B0"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MSBandAzure.Views
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Panel_Background(global::Windows.UI.Xaml.Controls.Panel obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(global::Windows.UI.Xaml.Controls.ProgressRing obj, global::System.Boolean value)
            {
                obj.IsActive = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
        };

        private class MainPage_obj2_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MSBandAzure.ViewModels.BandViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj2;
            private global::Windows.UI.Xaml.Controls.TextBlock obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;

            private MainPage_obj2_BindingsTracking bindingsTracking;

            public MainPage_obj2_Bindings()
            {
                this.bindingsTracking = new MainPage_obj2_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 3:
                        this.obj3 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MSBandAzure.ViewModels.BandViewModel data = args.NewValue as global::MSBandAzure.ViewModels.BandViewModel;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MSBandAzure.ViewModels.BandViewModel was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MSBandAzure.ViewModels.BandViewModel);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MSBandAzure.ViewModels.BandViewModel) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj2_Bindings

            public void SetDataRoot(global::MSBandAzure.ViewModels.BandViewModel newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MSBandAzure.ViewModels.BandViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Theme(obj.Theme, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_BandName(obj.BandName, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HeartRate(obj.HeartRate, phase);
                    }
                }
            }
            private void Update_Theme(global::MSBandAzure.ViewModels.BandThemeViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Theme(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Theme_TileColour(obj.TileColour, phase);
                    }
                }
            }
            private void Update_Theme_TileColour(global::Windows.UI.Xaml.Media.Brush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Panel_Background(this.obj2.Target as global::Windows.UI.Xaml.Controls.Grid, obj, null);
                }
            }
            private void Update_BandName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj3, obj, null);
                }
            }
            private void Update_HeartRate(global::MSBandAzure.ViewModels.HeartRateViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_HeartRate(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HeartRate_HeartRate(obj.HeartRate, phase);
                    }
                }
            }
            private void Update_HeartRate_HeartRate(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj.ToString(), null);
                }
            }

            private class MainPage_obj2_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj2_Bindings> WeakRefToBindingObj; 

                public MainPage_obj2_BindingsTracking(MainPage_obj2_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj2_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Theme(null);
                    UpdateChildListeners_HeartRate(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj2_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.BandViewModel obj = sender as global::MSBandAzure.ViewModels.BandViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Theme(obj.Theme, DATA_CHANGED);
                                    bindings.Update_HeartRate(obj.HeartRate, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Theme":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Theme(obj.Theme, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "HeartRate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HeartRate(obj.HeartRate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MSBandAzure.ViewModels.BandViewModel obj)
                {
                    MainPage_obj2_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Theme(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj2_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.BandThemeViewModel obj = sender as global::MSBandAzure.ViewModels.BandThemeViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Theme_TileColour(obj.TileColour, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "TileColour":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Theme_TileColour(obj.TileColour, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.BandThemeViewModel cache_Theme = null;
                public void UpdateChildListeners_Theme(global::MSBandAzure.ViewModels.BandThemeViewModel obj)
                {
                    if (obj != cache_Theme)
                    {
                        if (cache_Theme != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Theme).PropertyChanged -= PropertyChanged_Theme;
                            cache_Theme = null;
                        }
                        if (obj != null)
                        {
                            cache_Theme = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Theme;
                        }
                    }
                }
                public void PropertyChanged_HeartRate(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj2_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.HeartRateViewModel obj = sender as global::MSBandAzure.ViewModels.HeartRateViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_HeartRate_HeartRate(obj.HeartRate, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "HeartRate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HeartRate_HeartRate(obj.HeartRate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.HeartRateViewModel cache_HeartRate = null;
                public void UpdateChildListeners_HeartRate(global::MSBandAzure.ViewModels.HeartRateViewModel obj)
                {
                    if (obj != cache_HeartRate)
                    {
                        if (cache_HeartRate != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_HeartRate).PropertyChanged -= PropertyChanged_HeartRate;
                            cache_HeartRate = null;
                        }
                        if (obj != null)
                        {
                            cache_HeartRate = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_HeartRate;
                        }
                    }
                }
            }
        }

        private class MainPage_obj5_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MSBandAzure.ViewModels.BandViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj5;
            private global::Windows.UI.Xaml.Controls.TextBlock obj6;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Windows.UI.Xaml.Controls.TextBlock obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj9;
            private global::Windows.UI.Xaml.Controls.ProgressRing obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::Windows.UI.Xaml.Controls.TextBlock obj14;

            private MainPage_obj5_BindingsTracking bindingsTracking;

            public MainPage_obj5_Bindings()
            {
                this.bindingsTracking = new MainPage_obj5_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 5:
                        this.obj5 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 6:
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 9:
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.ProgressRing)target;
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MSBandAzure.ViewModels.BandViewModel data = args.NewValue as global::MSBandAzure.ViewModels.BandViewModel;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MSBandAzure.ViewModels.BandViewModel was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MSBandAzure.ViewModels.BandViewModel);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MSBandAzure.ViewModels.BandViewModel) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj5_Bindings

            public void SetDataRoot(global::MSBandAzure.ViewModels.BandViewModel newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MSBandAzure.ViewModels.BandViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Theme(obj.Theme, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_BandName(obj.BandName, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Distance(obj.Distance, phase);
                        this.Update_IsBusy(obj.IsBusy, phase);
                        this.Update_StatusText(obj.StatusText, phase);
                        this.Update_UV(obj.UV, phase);
                        this.Update_SkinTemp(obj.SkinTemp, phase);
                        this.Update_HeartRate(obj.HeartRate, phase);
                    }
                }
            }
            private void Update_Theme(global::MSBandAzure.ViewModels.BandThemeViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Theme(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Theme_TileColour(obj.TileColour, phase);
                    }
                }
            }
            private void Update_Theme_TileColour(global::Windows.UI.Xaml.Media.Brush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Panel_Background(this.obj5.Target as global::Windows.UI.Xaml.Controls.Grid, obj, null);
                }
            }
            private void Update_BandName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                }
            }
            private void Update_Distance(global::MSBandAzure.ViewModels.DistanceViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Distance(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Distance_Speed(obj.Speed, phase);
                        this.Update_Distance_Distance(obj.Distance, phase);
                        this.Update_Distance_Pace(obj.Pace, phase);
                    }
                }
            }
            private void Update_Distance_Speed(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj.ToString(), null);
                }
            }
            private void Update_Distance_Distance(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj.ToString(), null);
                }
            }
            private void Update_Distance_Pace(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj9, obj.ToString(), null);
                }
            }
            private void Update_IsBusy(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ProgressRing_IsActive(this.obj10, obj);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                }
            }
            private void Update_StatusText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                }
            }
            private void Update_UV(global::MSBandAzure.ViewModels.UVViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_UV(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_UV_UVIndex(obj.UVIndex, phase);
                    }
                }
            }
            private void Update_UV_UVIndex(global::Microsoft.Band.Sensors.UVIndexLevel obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj.ToString(), null);
                }
            }
            private void Update_SkinTemp(global::MSBandAzure.ViewModels.SkinTempViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SkinTemp(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SkinTemp_SkinTemp(obj.SkinTemp, phase);
                    }
                }
            }
            private void Update_SkinTemp_SkinTemp(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj.ToString(), null);
                }
            }
            private void Update_HeartRate(global::MSBandAzure.ViewModels.HeartRateViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_HeartRate(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HeartRate_HeartRate(obj.HeartRate, phase);
                    }
                }
            }
            private void Update_HeartRate_HeartRate(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj.ToString(), null);
                }
            }

            private class MainPage_obj5_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj5_Bindings> WeakRefToBindingObj; 

                public MainPage_obj5_BindingsTracking(MainPage_obj5_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj5_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Theme(null);
                    UpdateChildListeners_Distance(null);
                    UpdateChildListeners_UV(null);
                    UpdateChildListeners_SkinTemp(null);
                    UpdateChildListeners_HeartRate(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj5_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.BandViewModel obj = sender as global::MSBandAzure.ViewModels.BandViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Theme(obj.Theme, DATA_CHANGED);
                                    bindings.Update_Distance(obj.Distance, DATA_CHANGED);
                                    bindings.Update_IsBusy(obj.IsBusy, DATA_CHANGED);
                                    bindings.Update_StatusText(obj.StatusText, DATA_CHANGED);
                                    bindings.Update_UV(obj.UV, DATA_CHANGED);
                                    bindings.Update_SkinTemp(obj.SkinTemp, DATA_CHANGED);
                                    bindings.Update_HeartRate(obj.HeartRate, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Theme":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Theme(obj.Theme, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Distance":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Distance(obj.Distance, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsBusy":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsBusy(obj.IsBusy, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StatusText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_StatusText(obj.StatusText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UV":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_UV(obj.UV, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SkinTemp":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SkinTemp(obj.SkinTemp, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "HeartRate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HeartRate(obj.HeartRate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MSBandAzure.ViewModels.BandViewModel obj)
                {
                    MainPage_obj5_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Theme(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj5_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.BandThemeViewModel obj = sender as global::MSBandAzure.ViewModels.BandThemeViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Theme_TileColour(obj.TileColour, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "TileColour":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Theme_TileColour(obj.TileColour, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.BandThemeViewModel cache_Theme = null;
                public void UpdateChildListeners_Theme(global::MSBandAzure.ViewModels.BandThemeViewModel obj)
                {
                    if (obj != cache_Theme)
                    {
                        if (cache_Theme != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Theme).PropertyChanged -= PropertyChanged_Theme;
                            cache_Theme = null;
                        }
                        if (obj != null)
                        {
                            cache_Theme = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Theme;
                        }
                    }
                }
                public void PropertyChanged_Distance(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj5_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.DistanceViewModel obj = sender as global::MSBandAzure.ViewModels.DistanceViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Distance_Speed(obj.Speed, DATA_CHANGED);
                                    bindings.Update_Distance_Distance(obj.Distance, DATA_CHANGED);
                                    bindings.Update_Distance_Pace(obj.Pace, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Speed":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Distance_Speed(obj.Speed, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Distance":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Distance_Distance(obj.Distance, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Pace":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Distance_Pace(obj.Pace, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.DistanceViewModel cache_Distance = null;
                public void UpdateChildListeners_Distance(global::MSBandAzure.ViewModels.DistanceViewModel obj)
                {
                    if (obj != cache_Distance)
                    {
                        if (cache_Distance != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Distance).PropertyChanged -= PropertyChanged_Distance;
                            cache_Distance = null;
                        }
                        if (obj != null)
                        {
                            cache_Distance = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Distance;
                        }
                    }
                }
                public void PropertyChanged_UV(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj5_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.UVViewModel obj = sender as global::MSBandAzure.ViewModels.UVViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_UV_UVIndex(obj.UVIndex, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "UVIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_UV_UVIndex(obj.UVIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.UVViewModel cache_UV = null;
                public void UpdateChildListeners_UV(global::MSBandAzure.ViewModels.UVViewModel obj)
                {
                    if (obj != cache_UV)
                    {
                        if (cache_UV != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_UV).PropertyChanged -= PropertyChanged_UV;
                            cache_UV = null;
                        }
                        if (obj != null)
                        {
                            cache_UV = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_UV;
                        }
                    }
                }
                public void PropertyChanged_SkinTemp(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj5_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.SkinTempViewModel obj = sender as global::MSBandAzure.ViewModels.SkinTempViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_SkinTemp_SkinTemp(obj.SkinTemp, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SkinTemp":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SkinTemp_SkinTemp(obj.SkinTemp, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.SkinTempViewModel cache_SkinTemp = null;
                public void UpdateChildListeners_SkinTemp(global::MSBandAzure.ViewModels.SkinTempViewModel obj)
                {
                    if (obj != cache_SkinTemp)
                    {
                        if (cache_SkinTemp != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SkinTemp).PropertyChanged -= PropertyChanged_SkinTemp;
                            cache_SkinTemp = null;
                        }
                        if (obj != null)
                        {
                            cache_SkinTemp = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SkinTemp;
                        }
                    }
                }
                public void PropertyChanged_HeartRate(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj5_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.HeartRateViewModel obj = sender as global::MSBandAzure.ViewModels.HeartRateViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_HeartRate_HeartRate(obj.HeartRate, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "HeartRate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HeartRate_HeartRate(obj.HeartRate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.HeartRateViewModel cache_HeartRate = null;
                public void UpdateChildListeners_HeartRate(global::MSBandAzure.ViewModels.HeartRateViewModel obj)
                {
                    if (obj != cache_HeartRate)
                    {
                        if (cache_HeartRate != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_HeartRate).PropertyChanged -= PropertyChanged_HeartRate;
                            cache_HeartRate = null;
                        }
                        if (obj != null)
                        {
                            cache_HeartRate = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_HeartRate;
                        }
                    }
                }
            }
        }

        private class MainPage_obj15_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MSBandAzure.ViewModels.BandViewModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj15;
            private global::Windows.UI.Xaml.Controls.TextBlock obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;

            private MainPage_obj15_BindingsTracking bindingsTracking;

            public MainPage_obj15_Bindings()
            {
                this.bindingsTracking = new MainPage_obj15_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 15:
                        this.obj15 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::MSBandAzure.ViewModels.BandViewModel data = args.NewValue as global::MSBandAzure.ViewModels.BandViewModel;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::MSBandAzure.ViewModels.BandViewModel was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::MSBandAzure.ViewModels.BandViewModel);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::MSBandAzure.ViewModels.BandViewModel) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj15_Bindings

            public void SetDataRoot(global::MSBandAzure.ViewModels.BandViewModel newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MSBandAzure.ViewModels.BandViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Theme(obj.Theme, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_BandName(obj.BandName, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HeartRate(obj.HeartRate, phase);
                    }
                }
            }
            private void Update_Theme(global::MSBandAzure.ViewModels.BandThemeViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_Theme(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Theme_TileColour(obj.TileColour, phase);
                    }
                }
            }
            private void Update_Theme_TileColour(global::Windows.UI.Xaml.Media.Brush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Panel_Background(this.obj15.Target as global::Windows.UI.Xaml.Controls.Grid, obj, null);
                }
            }
            private void Update_BandName(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                }
            }
            private void Update_HeartRate(global::MSBandAzure.ViewModels.HeartRateViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_HeartRate(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HeartRate_HeartRate(obj.HeartRate, phase);
                    }
                }
            }
            private void Update_HeartRate_HeartRate(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj.ToString(), null);
                }
            }

            private class MainPage_obj15_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj15_Bindings> WeakRefToBindingObj; 

                public MainPage_obj15_BindingsTracking(MainPage_obj15_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj15_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_Theme(null);
                    UpdateChildListeners_HeartRate(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj15_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.BandViewModel obj = sender as global::MSBandAzure.ViewModels.BandViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Theme(obj.Theme, DATA_CHANGED);
                                    bindings.Update_HeartRate(obj.HeartRate, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Theme":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Theme(obj.Theme, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "HeartRate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HeartRate(obj.HeartRate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::MSBandAzure.ViewModels.BandViewModel obj)
                {
                    MainPage_obj15_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void PropertyChanged_Theme(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj15_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.BandThemeViewModel obj = sender as global::MSBandAzure.ViewModels.BandThemeViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Theme_TileColour(obj.TileColour, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "TileColour":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Theme_TileColour(obj.TileColour, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.BandThemeViewModel cache_Theme = null;
                public void UpdateChildListeners_Theme(global::MSBandAzure.ViewModels.BandThemeViewModel obj)
                {
                    if (obj != cache_Theme)
                    {
                        if (cache_Theme != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_Theme).PropertyChanged -= PropertyChanged_Theme;
                            cache_Theme = null;
                        }
                        if (obj != null)
                        {
                            cache_Theme = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_Theme;
                        }
                    }
                }
                public void PropertyChanged_HeartRate(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj15_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.HeartRateViewModel obj = sender as global::MSBandAzure.ViewModels.HeartRateViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_HeartRate_HeartRate(obj.HeartRate, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "HeartRate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HeartRate_HeartRate(obj.HeartRate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.HeartRateViewModel cache_HeartRate = null;
                public void UpdateChildListeners_HeartRate(global::MSBandAzure.ViewModels.HeartRateViewModel obj)
                {
                    if (obj != cache_HeartRate)
                    {
                        if (cache_HeartRate != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_HeartRate).PropertyChanged -= PropertyChanged_HeartRate;
                            cache_HeartRate = null;
                        }
                        if (obj != null)
                        {
                            cache_HeartRate = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_HeartRate;
                        }
                    }
                }
            }
        }

        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::MSBandAzure.Views.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.GridView obj25;
            private global::Windows.UI.Xaml.Controls.GridView obj26;
            private global::Windows.UI.Xaml.Controls.ListView obj27;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 25:
                        this.obj25 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 26:
                        this.obj26 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 27:
                        this.obj27 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    default:
                        break;
                }
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj1_Bindings

            public void SetDataRoot(global::MSBandAzure.Views.MainPage newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::MSBandAzure.Views.MainPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::MSBandAzure.ViewModels.MainPageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Bands(obj.Bands, phase);
                    }
                }
            }
            private void Update_ViewModel_Bands(global::System.Collections.ObjectModel.ObservableCollection<global::MSBandAzure.ViewModels.BandViewModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj25, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj26, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj27, obj, null);
                }
            }

            private class MainPage_obj1_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj1_Bindings> WeakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::MSBandAzure.ViewModels.MainPageViewModel obj = sender as global::MSBandAzure.ViewModels.MainPageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ViewModel_Bands(obj.Bands, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Bands":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Bands(obj.Bands, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::MSBandAzure.ViewModels.MainPageViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::MSBandAzure.ViewModels.MainPageViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Bands(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::MSBandAzure.ViewModels.BandViewModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::MSBandAzure.ViewModels.BandViewModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Bands(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::MSBandAzure.ViewModels.BandViewModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::MSBandAzure.ViewModels.BandViewModel>;
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 18:
                {
                    this.VisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 19:
                {
                    this.VisualStateNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 20:
                {
                    this.VisualStateNormal = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 21:
                {
                    this.VisualStateWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 22:
                {
                    this.VisualStateWideTrigger = (global::Windows.UI.Xaml.AdaptiveTrigger)(target);
                }
                break;
            case 23:
                {
                    this.VisualStateNormalTrigger = (global::Windows.UI.Xaml.AdaptiveTrigger)(target);
                }
                break;
            case 24:
                {
                    this.VisualStateNarrowTrigger = (global::Windows.UI.Xaml.AdaptiveTrigger)(target);
                }
                break;
            case 25:
                {
                    this.wideList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    #line 263 "..\..\..\Views\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.GridView)this.wideList).ItemClick += this.GotoDetailsPage;
                    #line default
                }
                break;
            case 26:
                {
                    this.widerList = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    #line 269 "..\..\..\Views\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.GridView)this.widerList).SizeChanged += this.widerListsizeChanged;
                    #line default
                }
                break;
            case 27:
                {
                    this.narrowList = (global::Windows.UI.Xaml.Controls.ListView)(target);
                    #line 287 "..\..\..\Views\MainPage.xaml"
                    ((global::Windows.UI.Xaml.Controls.ListView)this.narrowList).ItemClick += this.GotoDetailsPage;
                    #line default
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 2:
                {
                    global::Windows.UI.Xaml.Controls.Grid element2 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj2_Bindings bindings = new MainPage_obj2_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MSBandAzure.ViewModels.BandViewModel) element2.DataContext);
                    element2.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element2, bindings);
                }
                break;
            case 5:
                {
                    global::Windows.UI.Xaml.Controls.Grid element5 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj5_Bindings bindings = new MainPage_obj5_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MSBandAzure.ViewModels.BandViewModel) element5.DataContext);
                    element5.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element5, bindings);
                }
                break;
            case 15:
                {
                    global::Windows.UI.Xaml.Controls.Grid element15 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    MainPage_obj15_Bindings bindings = new MainPage_obj15_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::MSBandAzure.ViewModels.BandViewModel) element15.DataContext);
                    element15.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element15, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

